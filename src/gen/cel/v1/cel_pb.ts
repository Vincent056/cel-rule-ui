// @generated by protoc-gen-es v2.6.1 with parameter "target=ts"
// @generated from file cel/v1/cel.proto (package cel.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv2";
import { enumDesc, fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv2";
import type { Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file cel/v1/cel.proto.
 */
export const file_cel_v1_cel: GenFile = /*@__PURE__*/
  fileDesc("", [file_google_protobuf_timestamp]);

/**
 * Request and response messages for CEL validation
 *
 * @generated from message cel.v1.ValidateCELRequest
 */
export type ValidateCELRequest = Message<"cel.v1.ValidateCELRequest"> & {
  /**
   * CEL expression to evaluate
   *
   * @generated from field: string expression = 1;
   */
  expression: string;

  /**
   * Test cases for offline validation
   *
   * @generated from field: repeated cel.v1.RuleTestCase test_cases = 2;
   */
  testCases: RuleTestCase[];

  /**
   * Multiple inputs for the rule
   *
   * @generated from field: repeated cel.v1.RuleInput inputs = 3;
   */
  inputs: RuleInput[];
};

/**
 * Describes the message cel.v1.ValidateCELRequest.
 * Use `create(ValidateCELRequestSchema)` to create a new message.
 */
export const ValidateCELRequestSchema: GenMessage<ValidateCELRequest> = /*@__PURE__*/
  messageDesc(file_cel_v1_cel, 0);

/**
 * Input definition for CEL rules
 *
 * @generated from message cel.v1.RuleInput
 */
export type RuleInput = Message<"cel.v1.RuleInput"> & {
  /**
   * Variable name in CEL expression
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * @generated from oneof cel.v1.RuleInput.input_type
   */
  inputType: {
    /**
     * @generated from field: cel.v1.KubernetesInput kubernetes = 2;
     */
    value: KubernetesInput;
    case: "kubernetes";
  } | {
    /**
     * @generated from field: cel.v1.FileInput file = 3;
     */
    value: FileInput;
    case: "file";
  } | {
    /**
     * @generated from field: cel.v1.HttpInput http = 4;
     */
    value: HttpInput;
    case: "http";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message cel.v1.RuleInput.
 * Use `create(RuleInputSchema)` to create a new message.
 */
export const RuleInputSchema: GenMessage<RuleInput> = /*@__PURE__*/
  messageDesc(file_cel_v1_cel, 1);

/**
 * Kubernetes resource input
 *
 * @generated from message cel.v1.KubernetesInput
 */
export type KubernetesInput = Message<"cel.v1.KubernetesInput"> & {
  /**
   * @generated from field: string group = 1;
   */
  group: string;

  /**
   * @generated from field: string version = 2;
   */
  version: string;

  /**
   * @generated from field: string resource = 3;
   */
  resource: string;

  /**
   * @generated from field: string namespace = 4;
   */
  namespace: string;

  /**
   * Specific resource name (optional)
   *
   * @generated from field: string resource_name = 5;
   */
  resourceName: string;

  /**
   * If true, fetch all resources as a list
   *
   * @generated from field: bool list_all = 6;
   */
  listAll: boolean;
};

/**
 * Describes the message cel.v1.KubernetesInput.
 * Use `create(KubernetesInputSchema)` to create a new message.
 */
export const KubernetesInputSchema: GenMessage<KubernetesInput> = /*@__PURE__*/
  messageDesc(file_cel_v1_cel, 2);

/**
 * File system input
 *
 * @generated from message cel.v1.FileInput
 */
export type FileInput = Message<"cel.v1.FileInput"> & {
  /**
   * @generated from field: string path = 1;
   */
  path: string;

  /**
   * json, yaml, text
   *
   * @generated from field: string format = 2;
   */
  format: string;

  /**
   * @generated from field: bool recursive = 3;
   */
  recursive: boolean;

  /**
   * @generated from field: bool check_permissions = 4;
   */
  checkPermissions: boolean;

  /**
   * Node targeting for cluster file system checks
   *
   * @generated from oneof cel.v1.FileInput.target
   */
  target: {
    /**
     * Run on specific node(s)
     *
     * @generated from field: cel.v1.NodeSelector node_selector = 5;
     */
    value: NodeSelector;
    case: "nodeSelector";
  } | {
    /**
     * Run on all nodes
     *
     * @generated from field: bool all_nodes = 6;
     */
    value: boolean;
    case: "allNodes";
  } | { case: undefined; value?: undefined };

  /**
   * How to access the file system
   *
   * @generated from field: cel.v1.FileAccessMode access_mode = 7;
   */
  accessMode: FileAccessMode;
};

/**
 * Describes the message cel.v1.FileInput.
 * Use `create(FileInputSchema)` to create a new message.
 */
export const FileInputSchema: GenMessage<FileInput> = /*@__PURE__*/
  messageDesc(file_cel_v1_cel, 3);

/**
 * Node selection criteria
 *
 * @generated from message cel.v1.NodeSelector
 */
export type NodeSelector = Message<"cel.v1.NodeSelector"> & {
  /**
   * Specific node names
   *
   * @generated from field: repeated string node_names = 1;
   */
  nodeNames: string[];

  /**
   * Node label selector
   *
   * @generated from field: map<string, string> labels = 2;
   */
  labels: { [key: string]: string };

  /**
   * Tolerate specific taints
   *
   * @generated from field: repeated string taints_tolerated = 3;
   */
  taintsTolerated: string[];
};

/**
 * Describes the message cel.v1.NodeSelector.
 * Use `create(NodeSelectorSchema)` to create a new message.
 */
export const NodeSelectorSchema: GenMessage<NodeSelector> = /*@__PURE__*/
  messageDesc(file_cel_v1_cel, 4);

/**
 * HTTP API input
 *
 * @generated from message cel.v1.HttpInput
 */
export type HttpInput = Message<"cel.v1.HttpInput"> & {
  /**
   * @generated from field: string url = 1;
   */
  url: string;

  /**
   * @generated from field: string method = 2;
   */
  method: string;

  /**
   * @generated from field: map<string, string> headers = 3;
   */
  headers: { [key: string]: string };

  /**
   * @generated from field: string body = 4;
   */
  body: string;
};

/**
 * Describes the message cel.v1.HttpInput.
 * Use `create(HttpInputSchema)` to create a new message.
 */
export const HttpInputSchema: GenMessage<HttpInput> = /*@__PURE__*/
  messageDesc(file_cel_v1_cel, 5);

/**
 * @generated from message cel.v1.ValidationResponse
 */
export type ValidationResponse = Message<"cel.v1.ValidationResponse"> & {
  /**
   * @generated from field: bool success = 1;
   */
  success: boolean;

  /**
   * @generated from field: repeated cel.v1.ValidationResult results = 2;
   */
  results: ValidationResult[];

  /**
   * @generated from field: string error = 3;
   */
  error: string;

  /**
   * @generated from field: cel.v1.PerformanceMetrics performance = 4;
   */
  performance?: PerformanceMetrics;
};

/**
 * Describes the message cel.v1.ValidationResponse.
 * Use `create(ValidationResponseSchema)` to create a new message.
 */
export const ValidationResponseSchema: GenMessage<ValidationResponse> = /*@__PURE__*/
  messageDesc(file_cel_v1_cel, 6);

/**
 * @generated from message cel.v1.ValidationResult
 */
export type ValidationResult = Message<"cel.v1.ValidationResult"> & {
  /**
   * @generated from field: string test_case = 1;
   */
  testCase: string;

  /**
   * @generated from field: bool passed = 2;
   */
  passed: boolean;

  /**
   * @generated from field: string error = 3;
   */
  error: string;

  /**
   * @generated from field: string details = 4;
   */
  details: string;

  /**
   * Resource information for better debugging
   *
   * @generated from field: cel.v1.ResourceInfo resource_info = 5;
   */
  resourceInfo?: ResourceInfo;

  /**
   * Variables used in evaluation
   *
   * @generated from field: map<string, string> evaluation_context = 6;
   */
  evaluationContext: { [key: string]: string };
};

/**
 * Describes the message cel.v1.ValidationResult.
 * Use `create(ValidationResultSchema)` to create a new message.
 */
export const ValidationResultSchema: GenMessage<ValidationResult> = /*@__PURE__*/
  messageDesc(file_cel_v1_cel, 7);

/**
 * Information about the resource being evaluated
 *
 * @generated from message cel.v1.ResourceInfo
 */
export type ResourceInfo = Message<"cel.v1.ResourceInfo"> & {
  /**
   * @generated from field: string api_version = 1;
   */
  apiVersion: string;

  /**
   * @generated from field: string kind = 2;
   */
  kind: string;

  /**
   * @generated from field: string name = 3;
   */
  name: string;

  /**
   * @generated from field: string namespace = 4;
   */
  namespace: string;

  /**
   * @generated from field: string uid = 5;
   */
  uid: string;
};

/**
 * Describes the message cel.v1.ResourceInfo.
 * Use `create(ResourceInfoSchema)` to create a new message.
 */
export const ResourceInfoSchema: GenMessage<ResourceInfo> = /*@__PURE__*/
  messageDesc(file_cel_v1_cel, 8);

/**
 * @generated from message cel.v1.PerformanceMetrics
 */
export type PerformanceMetrics = Message<"cel.v1.PerformanceMetrics"> & {
  /**
   * @generated from field: int64 total_time_ms = 1;
   */
  totalTimeMs: bigint;

  /**
   * @generated from field: int64 average_time_ms = 2;
   */
  averageTimeMs: bigint;

  /**
   * @generated from field: int32 resources_count = 3;
   */
  resourcesCount: number;
};

/**
 * Describes the message cel.v1.PerformanceMetrics.
 * Use `create(PerformanceMetricsSchema)` to create a new message.
 */
export const PerformanceMetricsSchema: GenMessage<PerformanceMetrics> = /*@__PURE__*/
  messageDesc(file_cel_v1_cel, 9);

/**
 * Request and response for resource discovery
 *
 * @generated from message cel.v1.DiscoverResourcesRequest
 */
export type DiscoverResourcesRequest = Message<"cel.v1.DiscoverResourcesRequest"> & {
  /**
   * @generated from field: string namespace = 1;
   */
  namespace: string;

  /**
   * Deprecated: use gvr_filters instead
   *
   * @generated from field: repeated string resource_types = 2;
   */
  resourceTypes: string[];

  /**
   * GVR filters for resource discovery
   *
   * @generated from field: repeated cel.v1.GVRFilter gvr_filters = 3;
   */
  gvrFilters: GVRFilter[];

  /**
   * Configuration options for discovery
   *
   * @generated from field: cel.v1.DiscoveryOptions options = 4;
   */
  options?: DiscoveryOptions;
};

/**
 * Describes the message cel.v1.DiscoverResourcesRequest.
 * Use `create(DiscoverResourcesRequestSchema)` to create a new message.
 */
export const DiscoverResourcesRequestSchema: GenMessage<DiscoverResourcesRequest> = /*@__PURE__*/
  messageDesc(file_cel_v1_cel, 10);

/**
 * Discovery configuration options
 *
 * @generated from message cel.v1.DiscoveryOptions
 */
export type DiscoveryOptions = Message<"cel.v1.DiscoveryOptions"> & {
  /**
   * Whether to count resources (default: true)
   *
   * @generated from field: bool include_count = 1;
   */
  includeCount: boolean;

  /**
   * Whether to include sample resources (default: false)
   *
   * @generated from field: bool include_samples = 2;
   */
  includeSamples: boolean;

  /**
   * Max number of samples per resource type (default: 1)
   *
   * @generated from field: int32 max_samples_per_type = 3;
   */
  maxSamplesPerType: number;
};

/**
 * Describes the message cel.v1.DiscoveryOptions.
 * Use `create(DiscoveryOptionsSchema)` to create a new message.
 */
export const DiscoveryOptionsSchema: GenMessage<DiscoveryOptions> = /*@__PURE__*/
  messageDesc(file_cel_v1_cel, 11);

/**
 * GroupVersionResource filter
 *
 * @generated from message cel.v1.GVRFilter
 */
export type GVRFilter = Message<"cel.v1.GVRFilter"> & {
  /**
   * @generated from field: string group = 1;
   */
  group: string;

  /**
   * @generated from field: string version = 2;
   */
  version: string;

  /**
   * @generated from field: string resource = 3;
   */
  resource: string;
};

/**
 * Describes the message cel.v1.GVRFilter.
 * Use `create(GVRFilterSchema)` to create a new message.
 */
export const GVRFilterSchema: GenMessage<GVRFilter> = /*@__PURE__*/
  messageDesc(file_cel_v1_cel, 12);

/**
 * @generated from message cel.v1.ResourceDiscoveryResponse
 */
export type ResourceDiscoveryResponse = Message<"cel.v1.ResourceDiscoveryResponse"> & {
  /**
   * @generated from field: bool success = 1;
   */
  success: boolean;

  /**
   * @generated from field: repeated cel.v1.DiscoveredResource resources = 2;
   */
  resources: DiscoveredResource[];

  /**
   * @generated from field: string error = 3;
   */
  error: string;
};

/**
 * Describes the message cel.v1.ResourceDiscoveryResponse.
 * Use `create(ResourceDiscoveryResponseSchema)` to create a new message.
 */
export const ResourceDiscoveryResponseSchema: GenMessage<ResourceDiscoveryResponse> = /*@__PURE__*/
  messageDesc(file_cel_v1_cel, 13);

/**
 * @generated from message cel.v1.DiscoveredResource
 */
export type DiscoveredResource = Message<"cel.v1.DiscoveredResource"> & {
  /**
   * @generated from field: string api_version = 1;
   */
  apiVersion: string;

  /**
   * @generated from field: string kind = 2;
   */
  kind: string;

  /**
   * @generated from field: string name = 3;
   */
  name: string;

  /**
   * @generated from field: string namespace = 4;
   */
  namespace: string;

  /**
   * @generated from field: int32 count = 5;
   */
  count: number;

  /**
   * Sample resources
   *
   * @generated from field: repeated cel.v1.ResourceSample samples = 6;
   */
  samples: ResourceSample[];
};

/**
 * Describes the message cel.v1.DiscoveredResource.
 * Use `create(DiscoveredResourceSchema)` to create a new message.
 */
export const DiscoveredResourceSchema: GenMessage<DiscoveredResource> = /*@__PURE__*/
  messageDesc(file_cel_v1_cel, 14);

/**
 * Sample resource information
 *
 * @generated from message cel.v1.ResourceSample
 */
export type ResourceSample = Message<"cel.v1.ResourceSample"> & {
  /**
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * @generated from field: string namespace = 2;
   */
  namespace: string;

  /**
   * @generated from field: map<string, string> labels = 3;
   */
  labels: { [key: string]: string };

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 4;
   */
  createdAt?: Timestamp;
};

/**
 * Describes the message cel.v1.ResourceSample.
 * Use `create(ResourceSampleSchema)` to create a new message.
 */
export const ResourceSampleSchema: GenMessage<ResourceSample> = /*@__PURE__*/
  messageDesc(file_cel_v1_cel, 15);

/**
 * Agent execution messages
 *
 * @generated from message cel.v1.AgentTask
 */
export type AgentTask = Message<"cel.v1.AgentTask"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: string type = 2;
   */
  type: string;

  /**
   * @generated from field: string objective = 3;
   */
  objective: string;

  /**
   * JSON-encoded context
   *
   * @generated from field: string context_json = 4;
   */
  contextJson: string;

  /**
   * @generated from field: map<string, string> parameters = 5;
   */
  parameters: { [key: string]: string };
};

/**
 * Describes the message cel.v1.AgentTask.
 * Use `create(AgentTaskSchema)` to create a new message.
 */
export const AgentTaskSchema: GenMessage<AgentTask> = /*@__PURE__*/
  messageDesc(file_cel_v1_cel, 16);

/**
 * @generated from message cel.v1.AgentExecutionRequest
 */
export type AgentExecutionRequest = Message<"cel.v1.AgentExecutionRequest"> & {
  /**
   * @generated from field: cel.v1.AgentTask task = 1;
   */
  task?: AgentTask;

  /**
   * @generated from field: string agent_role = 2;
   */
  agentRole: string;

  /**
   * @generated from field: bool use_cel_validation = 3;
   */
  useCelValidation: boolean;
};

/**
 * Describes the message cel.v1.AgentExecutionRequest.
 * Use `create(AgentExecutionRequestSchema)` to create a new message.
 */
export const AgentExecutionRequestSchema: GenMessage<AgentExecutionRequest> = /*@__PURE__*/
  messageDesc(file_cel_v1_cel, 17);

/**
 * @generated from message cel.v1.AgentExecutionResponse
 */
export type AgentExecutionResponse = Message<"cel.v1.AgentExecutionResponse"> & {
  /**
   * @generated from field: bool success = 1;
   */
  success: boolean;

  /**
   * JSON-encoded result
   *
   * @generated from field: string result_json = 2;
   */
  resultJson: string;

  /**
   * @generated from field: string error = 3;
   */
  error: string;

  /**
   * @generated from field: repeated string logs = 4;
   */
  logs: string[];

  /**
   * @generated from field: int64 execution_time_ms = 5;
   */
  executionTimeMs: bigint;
};

/**
 * Describes the message cel.v1.AgentExecutionResponse.
 * Use `create(AgentExecutionResponseSchema)` to create a new message.
 */
export const AgentExecutionResponseSchema: GenMessage<AgentExecutionResponse> = /*@__PURE__*/
  messageDesc(file_cel_v1_cel, 18);

/**
 * ValidateCELStreamRequest is sent by client to initiate validation
 *
 * @generated from message cel.v1.ValidateCELStreamRequest
 */
export type ValidateCELStreamRequest = Message<"cel.v1.ValidateCELStreamRequest"> & {
  /**
   * @generated from oneof cel.v1.ValidateCELStreamRequest.request
   */
  request: {
    /**
     * Initial validation request
     *
     * @generated from field: cel.v1.ValidateCELRequest validation_request = 1;
     */
    value: ValidateCELRequest;
    case: "validationRequest";
  } | {
    /**
     * Control message (e.g., cancel specific node)
     *
     * @generated from field: cel.v1.StreamControl control = 2;
     */
    value: StreamControl;
    case: "control";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message cel.v1.ValidateCELStreamRequest.
 * Use `create(ValidateCELStreamRequestSchema)` to create a new message.
 */
export const ValidateCELStreamRequestSchema: GenMessage<ValidateCELStreamRequest> = /*@__PURE__*/
  messageDesc(file_cel_v1_cel, 19);

/**
 * StreamControl allows client to control the stream
 *
 * @generated from message cel.v1.StreamControl
 */
export type StreamControl = Message<"cel.v1.StreamControl"> & {
  /**
   * @generated from field: cel.v1.StreamControl.Action action = 1;
   */
  action: StreamControl_Action;

  /**
   * Optional: target specific node
   *
   * @generated from field: string node_name = 2;
   */
  nodeName: string;

  /**
   * Optional: target specific job
   *
   * @generated from field: string job_id = 3;
   */
  jobId: string;
};

/**
 * Describes the message cel.v1.StreamControl.
 * Use `create(StreamControlSchema)` to create a new message.
 */
export const StreamControlSchema: GenMessage<StreamControl> = /*@__PURE__*/
  messageDesc(file_cel_v1_cel, 20);

/**
 * @generated from enum cel.v1.StreamControl.Action
 */
export enum StreamControl_Action {
  /**
   * @generated from enum value: CANCEL = 0;
   */
  CANCEL = 0,

  /**
   * @generated from enum value: PAUSE = 1;
   */
  PAUSE = 1,

  /**
   * @generated from enum value: RESUME = 2;
   */
  RESUME = 2,
}

/**
 * Describes the enum cel.v1.StreamControl.Action.
 */
export const StreamControl_ActionSchema: GenEnum<StreamControl_Action> = /*@__PURE__*/
  enumDesc(file_cel_v1_cel, 20, 0);

/**
 * ValidateCELStreamResponse streams back results and status updates
 *
 * @generated from message cel.v1.ValidateCELStreamResponse
 */
export type ValidateCELStreamResponse = Message<"cel.v1.ValidateCELStreamResponse"> & {
  /**
   * @generated from oneof cel.v1.ValidateCELStreamResponse.response
   */
  response: {
    /**
     * Node scanner status update
     *
     * @generated from field: cel.v1.NodeScannerStatus node_status = 1;
     */
    value: NodeScannerStatus;
    case: "nodeStatus";
  } | {
    /**
     * Validation result from a node
     *
     * @generated from field: cel.v1.NodeValidationResult node_result = 2;
     */
    value: NodeValidationResult;
    case: "nodeResult";
  } | {
    /**
     * Overall progress update
     *
     * @generated from field: cel.v1.ValidationProgress progress = 3;
     */
    value: ValidationProgress;
    case: "progress";
  } | {
    /**
     * Error occurred
     *
     * @generated from field: cel.v1.StreamError error = 4;
     */
    value: StreamError;
    case: "error";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message cel.v1.ValidateCELStreamResponse.
 * Use `create(ValidateCELStreamResponseSchema)` to create a new message.
 */
export const ValidateCELStreamResponseSchema: GenMessage<ValidateCELStreamResponse> = /*@__PURE__*/
  messageDesc(file_cel_v1_cel, 21);

/**
 * NodeScannerStatus tracks the status of a scanner on a specific node
 *
 * @generated from message cel.v1.NodeScannerStatus
 */
export type NodeScannerStatus = Message<"cel.v1.NodeScannerStatus"> & {
  /**
   * @generated from field: string node_name = 1;
   */
  nodeName: string;

  /**
   * @generated from field: string job_id = 2;
   */
  jobId: string;

  /**
   * @generated from field: cel.v1.NodeScannerStatus.Status status = 3;
   */
  status: NodeScannerStatus_Status;

  /**
   * @generated from field: string message = 4;
   */
  message: string;

  /**
   * @generated from field: int64 timestamp = 5;
   */
  timestamp: bigint;
};

/**
 * Describes the message cel.v1.NodeScannerStatus.
 * Use `create(NodeScannerStatusSchema)` to create a new message.
 */
export const NodeScannerStatusSchema: GenMessage<NodeScannerStatus> = /*@__PURE__*/
  messageDesc(file_cel_v1_cel, 22);

/**
 * @generated from enum cel.v1.NodeScannerStatus.Status
 */
export enum NodeScannerStatus_Status {
  /**
   * @generated from enum value: PENDING = 0;
   */
  PENDING = 0,

  /**
   * @generated from enum value: SCHEDULED = 1;
   */
  SCHEDULED = 1,

  /**
   * @generated from enum value: RUNNING = 2;
   */
  RUNNING = 2,

  /**
   * @generated from enum value: COMPLETED = 3;
   */
  COMPLETED = 3,

  /**
   * @generated from enum value: FAILED = 4;
   */
  FAILED = 4,

  /**
   * @generated from enum value: CANCELLED = 5;
   */
  CANCELLED = 5,
}

/**
 * Describes the enum cel.v1.NodeScannerStatus.Status.
 */
export const NodeScannerStatus_StatusSchema: GenEnum<NodeScannerStatus_Status> = /*@__PURE__*/
  enumDesc(file_cel_v1_cel, 22, 0);

/**
 * NodeValidationResult contains results from a specific node
 *
 * @generated from message cel.v1.NodeValidationResult
 */
export type NodeValidationResult = Message<"cel.v1.NodeValidationResult"> & {
  /**
   * @generated from field: string node_name = 1;
   */
  nodeName: string;

  /**
   * @generated from field: string job_id = 2;
   */
  jobId: string;

  /**
   * @generated from field: string file_path = 3;
   */
  filePath: string;

  /**
   * @generated from field: string expression = 4;
   */
  expression: string;

  /**
   * @generated from field: cel.v1.ValidationResult result = 5;
   */
  result?: ValidationResult;

  /**
   * @generated from field: int64 duration_ms = 6;
   */
  durationMs: bigint;
};

/**
 * Describes the message cel.v1.NodeValidationResult.
 * Use `create(NodeValidationResultSchema)` to create a new message.
 */
export const NodeValidationResultSchema: GenMessage<NodeValidationResult> = /*@__PURE__*/
  messageDesc(file_cel_v1_cel, 23);

/**
 * ValidationProgress tracks overall progress
 *
 * @generated from message cel.v1.ValidationProgress
 */
export type ValidationProgress = Message<"cel.v1.ValidationProgress"> & {
  /**
   * @generated from field: int32 total_nodes = 1;
   */
  totalNodes: number;

  /**
   * @generated from field: int32 completed_nodes = 2;
   */
  completedNodes: number;

  /**
   * @generated from field: int32 failed_nodes = 3;
   */
  failedNodes: number;

  /**
   * @generated from field: int32 pending_nodes = 4;
   */
  pendingNodes: number;

  /**
   * @generated from field: map<string, cel.v1.NodeScannerStatus> node_statuses = 5;
   */
  nodeStatuses: { [key: string]: NodeScannerStatus };
};

/**
 * Describes the message cel.v1.ValidationProgress.
 * Use `create(ValidationProgressSchema)` to create a new message.
 */
export const ValidationProgressSchema: GenMessage<ValidationProgress> = /*@__PURE__*/
  messageDesc(file_cel_v1_cel, 24);

/**
 * StreamError represents an error in the stream
 *
 * @generated from message cel.v1.StreamError
 */
export type StreamError = Message<"cel.v1.StreamError"> & {
  /**
   * @generated from field: string error = 1;
   */
  error: string;

  /**
   * Optional: node where error occurred
   *
   * @generated from field: string node_name = 2;
   */
  nodeName: string;

  /**
   * @generated from field: string details = 3;
   */
  details: string;
};

/**
 * Describes the message cel.v1.StreamError.
 * Use `create(StreamErrorSchema)` to create a new message.
 */
export const StreamErrorSchema: GenMessage<StreamError> = /*@__PURE__*/
  messageDesc(file_cel_v1_cel, 25);

/**
 * Chat Assistant Messages
 *
 * @generated from message cel.v1.ChatAssistRequest
 */
export type ChatAssistRequest = Message<"cel.v1.ChatAssistRequest"> & {
  /**
   * User's chat message
   *
   * @generated from field: string message = 1;
   */
  message: string;

  /**
   * @generated from oneof cel.v1.ChatAssistRequest.context
   */
  context: {
    /**
     * Context for rule generation
     *
     * @generated from field: cel.v1.RuleGenerationContext rule_context = 2;
     */
    value: RuleGenerationContext;
    case: "ruleContext";
  } | {
    /**
     * Test data for validation
     *
     * @generated from field: cel.v1.TestDataContext test_context = 3;
     */
    value: TestDataContext;
    case: "testContext";
  } | {
    /**
     * Rule modification context
     *
     * @generated from field: cel.v1.RuleModificationContext modification_context = 4;
     */
    value: RuleModificationContext;
    case: "modificationContext";
  } | { case: undefined; value?: undefined };

  /**
   * Optional: conversation ID to maintain context
   *
   * @generated from field: string conversation_id = 5;
   */
  conversationId: string;
};

/**
 * Describes the message cel.v1.ChatAssistRequest.
 * Use `create(ChatAssistRequestSchema)` to create a new message.
 */
export const ChatAssistRequestSchema: GenMessage<ChatAssistRequest> = /*@__PURE__*/
  messageDesc(file_cel_v1_cel, 26);

/**
 * @generated from message cel.v1.RuleGenerationContext
 */
export type RuleGenerationContext = Message<"cel.v1.RuleGenerationContext"> & {
  /**
   * Target resource type
   *
   * e.g., "Pod", "Deployment"
   *
   * @generated from field: string resource_type = 1;
   */
  resourceType: string;

  /**
   * e.g., "v1", "apps/v1"
   *
   * @generated from field: string api_version = 2;
   */
  apiVersion: string;

  /**
   * What to validate
   *
   * e.g., "ensure pods have resource limits"
   *
   * @generated from field: string validation_intent = 3;
   */
  validationIntent: string;

  /**
   * Whether to validate against live cluster
   *
   * @generated from field: bool use_live_cluster = 4;
   */
  useLiveCluster: boolean;

  /**
   * Namespace for live validation
   *
   * @generated from field: string namespace = 5;
   */
  namespace: string;
};

/**
 * Describes the message cel.v1.RuleGenerationContext.
 * Use `create(RuleGenerationContextSchema)` to create a new message.
 */
export const RuleGenerationContextSchema: GenMessage<RuleGenerationContext> = /*@__PURE__*/
  messageDesc(file_cel_v1_cel, 27);

/**
 * @generated from message cel.v1.TestDataContext
 */
export type TestDataContext = Message<"cel.v1.TestDataContext"> & {
  /**
   * Test data as JSON
   *
   * @generated from field: string test_data_json = 1;
   */
  testDataJson: string;

  /**
   * Expected result for the test
   *
   * @generated from field: bool expected_result = 2;
   */
  expectedResult: boolean;

  /**
   * Description of what we're testing
   *
   * @generated from field: string description = 3;
   */
  description: string;
};

/**
 * Describes the message cel.v1.TestDataContext.
 * Use `create(TestDataContextSchema)` to create a new message.
 */
export const TestDataContextSchema: GenMessage<TestDataContext> = /*@__PURE__*/
  messageDesc(file_cel_v1_cel, 28);

/**
 * @generated from message cel.v1.ChatAssistResponse
 */
export type ChatAssistResponse = Message<"cel.v1.ChatAssistResponse"> & {
  /**
   * @generated from oneof cel.v1.ChatAssistResponse.content
   */
  content: {
    /**
     * LLM is thinking/processing
     *
     * @generated from field: cel.v1.ThinkingMessage thinking = 1;
     */
    value: ThinkingMessage;
    case: "thinking";
  } | {
    /**
     * Generated CEL rule
     *
     * @generated from field: cel.v1.GeneratedRule rule = 2;
     */
    value: GeneratedRule;
    case: "rule";
  } | {
    /**
     * Validation result
     *
     * @generated from field: cel.v1.ValidationMessage validation = 3;
     */
    value: ValidationMessage;
    case: "validation";
  } | {
    /**
     * General text response
     *
     * @generated from field: cel.v1.TextMessage text = 4;
     */
    value: TextMessage;
    case: "text";
  } | {
    /**
     * Error occurred
     *
     * @generated from field: cel.v1.ErrorMessage error = 5;
     */
    value: ErrorMessage;
    case: "error";
  } | {
    /**
     * Resource discovery result
     *
     * @generated from field: cel.v1.ResourcesFound resources = 6;
     */
    value: ResourcesFound;
    case: "resources";
  } | { case: undefined; value?: undefined };

  /**
   * Timestamp for ordering
   *
   * @generated from field: int64 timestamp = 7;
   */
  timestamp: bigint;
};

/**
 * Describes the message cel.v1.ChatAssistResponse.
 * Use `create(ChatAssistResponseSchema)` to create a new message.
 */
export const ChatAssistResponseSchema: GenMessage<ChatAssistResponse> = /*@__PURE__*/
  messageDesc(file_cel_v1_cel, 29);

/**
 * @generated from message cel.v1.ThinkingMessage
 */
export type ThinkingMessage = Message<"cel.v1.ThinkingMessage"> & {
  /**
   * What the LLM is currently doing
   *
   * @generated from field: string message = 1;
   */
  message: string;
};

/**
 * Describes the message cel.v1.ThinkingMessage.
 * Use `create(ThinkingMessageSchema)` to create a new message.
 */
export const ThinkingMessageSchema: GenMessage<ThinkingMessage> = /*@__PURE__*/
  messageDesc(file_cel_v1_cel, 30);

/**
 * @generated from message cel.v1.GeneratedRule
 */
export type GeneratedRule = Message<"cel.v1.GeneratedRule"> & {
  /**
   * The CEL expression
   *
   * @generated from field: string expression = 1;
   */
  expression: string;

  /**
   * Human-readable explanation
   *
   * @generated from field: string explanation = 2;
   */
  explanation: string;

  /**
   * Variables used in the expression
   *
   * @generated from field: repeated string variables = 3;
   */
  variables: string[];

  /**
   * Suggested inputs for validation
   *
   * @generated from field: repeated cel.v1.RuleInput suggested_inputs = 4;
   */
  suggestedInputs: RuleInput[];

  /**
   * Test cases for the rule
   *
   * @generated from field: repeated cel.v1.RuleTestCase test_cases = 5;
   */
  testCases: RuleTestCase[];

  /**
   * Rule name
   *
   * @generated from field: string name = 6;
   */
  name: string;
};

/**
 * Describes the message cel.v1.GeneratedRule.
 * Use `create(GeneratedRuleSchema)` to create a new message.
 */
export const GeneratedRuleSchema: GenMessage<GeneratedRule> = /*@__PURE__*/
  messageDesc(file_cel_v1_cel, 31);

/**
 * @generated from message cel.v1.ValidationMessage
 */
export type ValidationMessage = Message<"cel.v1.ValidationMessage"> & {
  /**
   * @generated from field: bool success = 1;
   */
  success: boolean;

  /**
   * @generated from field: int32 passed_count = 2;
   */
  passedCount: number;

  /**
   * @generated from field: int32 failed_count = 3;
   */
  failedCount: number;

  /**
   * @generated from field: repeated cel.v1.ValidationDetail details = 4;
   */
  details: ValidationDetail[];
};

/**
 * Describes the message cel.v1.ValidationMessage.
 * Use `create(ValidationMessageSchema)` to create a new message.
 */
export const ValidationMessageSchema: GenMessage<ValidationMessage> = /*@__PURE__*/
  messageDesc(file_cel_v1_cel, 32);

/**
 * @generated from message cel.v1.ValidationDetail
 */
export type ValidationDetail = Message<"cel.v1.ValidationDetail"> & {
  /**
   * @generated from field: string resource_name = 1;
   */
  resourceName: string;

  /**
   * @generated from field: string namespace = 2;
   */
  namespace: string;

  /**
   * @generated from field: bool passed = 3;
   */
  passed: boolean;

  /**
   * @generated from field: string reason = 4;
   */
  reason: string;
};

/**
 * Describes the message cel.v1.ValidationDetail.
 * Use `create(ValidationDetailSchema)` to create a new message.
 */
export const ValidationDetailSchema: GenMessage<ValidationDetail> = /*@__PURE__*/
  messageDesc(file_cel_v1_cel, 33);

/**
 * @generated from message cel.v1.TextMessage
 */
export type TextMessage = Message<"cel.v1.TextMessage"> & {
  /**
   * @generated from field: string text = 1;
   */
  text: string;

  /**
   * "info", "warning", "suggestion"
   *
   * @generated from field: string type = 2;
   */
  type: string;
};

/**
 * Describes the message cel.v1.TextMessage.
 * Use `create(TextMessageSchema)` to create a new message.
 */
export const TextMessageSchema: GenMessage<TextMessage> = /*@__PURE__*/
  messageDesc(file_cel_v1_cel, 34);

/**
 * @generated from message cel.v1.ErrorMessage
 */
export type ErrorMessage = Message<"cel.v1.ErrorMessage"> & {
  /**
   * @generated from field: string error = 1;
   */
  error: string;

  /**
   * @generated from field: string details = 2;
   */
  details: string;
};

/**
 * Describes the message cel.v1.ErrorMessage.
 * Use `create(ErrorMessageSchema)` to create a new message.
 */
export const ErrorMessageSchema: GenMessage<ErrorMessage> = /*@__PURE__*/
  messageDesc(file_cel_v1_cel, 35);

/**
 * @generated from message cel.v1.ResourcesFound
 */
export type ResourcesFound = Message<"cel.v1.ResourcesFound"> & {
  /**
   * @generated from field: string resource_type = 1;
   */
  resourceType: string;

  /**
   * @generated from field: int32 count = 2;
   */
  count: number;

  /**
   * @generated from field: repeated string namespaces = 3;
   */
  namespaces: string[];
};

/**
 * Describes the message cel.v1.ResourcesFound.
 * Use `create(ResourcesFoundSchema)` to create a new message.
 */
export const ResourcesFoundSchema: GenMessage<ResourcesFound> = /*@__PURE__*/
  messageDesc(file_cel_v1_cel, 36);

/**
 * Rule Library Messages
 *
 * @generated from message cel.v1.CELRule
 */
export type CELRule = Message<"cel.v1.CELRule"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * @generated from field: string description = 3;
   */
  description: string;

  /**
   * @generated from field: string expression = 4;
   */
  expression: string;

  /**
   * @generated from field: repeated cel.v1.RuleInput inputs = 5;
   */
  inputs: RuleInput[];

  /**
   * @generated from field: repeated string tags = 6;
   */
  tags: string[];

  /**
   * @generated from field: string category = 7;
   */
  category: string;

  /**
   * low, medium, high, critical
   *
   * @generated from field: string severity = 8;
   */
  severity: string;

  /**
   * @generated from field: repeated cel.v1.RuleTestCase test_cases = 9;
   */
  testCases: RuleTestCase[];

  /**
   * @generated from field: cel.v1.RuleMetadata metadata = 10;
   */
  metadata?: RuleMetadata;

  /**
   * @generated from field: bool is_verified = 11;
   */
  isVerified: boolean;

  /**
   * @generated from field: int64 created_at = 12;
   */
  createdAt: bigint;

  /**
   * @generated from field: int64 updated_at = 13;
   */
  updatedAt: bigint;

  /**
   * @generated from field: string created_by = 14;
   */
  createdBy: string;

  /**
   * @generated from field: string last_modified_by = 15;
   */
  lastModifiedBy: string;
};

/**
 * Describes the message cel.v1.CELRule.
 * Use `create(CELRuleSchema)` to create a new message.
 */
export const CELRuleSchema: GenMessage<CELRule> = /*@__PURE__*/
  messageDesc(file_cel_v1_cel, 37);

/**
 * @generated from message cel.v1.RuleTestCase
 */
export type RuleTestCase = Message<"cel.v1.RuleTestCase"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * @generated from field: string description = 3;
   */
  description: string;

  /**
   * Input variable name -> JSON data
   *
   * @generated from field: map<string, string> test_data = 4;
   */
  testData: { [key: string]: string };

  /**
   * @generated from field: bool expected_result = 5;
   */
  expectedResult: boolean;

  /**
   * @generated from field: string expected_message = 6;
   */
  expectedMessage: string;

  /**
   * @generated from field: bool is_passing = 7;
   */
  isPassing: boolean;

  /**
   * @generated from field: string actual_result = 8;
   */
  actualResult: string;
};

/**
 * Describes the message cel.v1.RuleTestCase.
 * Use `create(RuleTestCaseSchema)` to create a new message.
 */
export const RuleTestCaseSchema: GenMessage<RuleTestCase> = /*@__PURE__*/
  messageDesc(file_cel_v1_cel, 38);

/**
 * @generated from message cel.v1.RuleMetadata
 */
export type RuleMetadata = Message<"cel.v1.RuleMetadata"> & {
  /**
   * CIS, NIST, PCI-DSS, etc.
   *
   * @generated from field: string compliance_framework = 1;
   */
  complianceFramework: string;

  /**
   * Links to documentation
   *
   * @generated from field: repeated string references = 2;
   */
  references: string[];

  /**
   * How to fix if rule fails
   *
   * @generated from field: string remediation = 3;
   */
  remediation: string;

  /**
   * kubernetes, openshift, etc.
   *
   * @generated from field: repeated string platforms = 4;
   */
  platforms: string[];

  /**
   * @generated from field: map<string, string> custom_fields = 5;
   */
  customFields: { [key: string]: string };
};

/**
 * Describes the message cel.v1.RuleMetadata.
 * Use `create(RuleMetadataSchema)` to create a new message.
 */
export const RuleMetadataSchema: GenMessage<RuleMetadata> = /*@__PURE__*/
  messageDesc(file_cel_v1_cel, 39);

/**
 * Save Rule
 *
 * @generated from message cel.v1.SaveRuleRequest
 */
export type SaveRuleRequest = Message<"cel.v1.SaveRuleRequest"> & {
  /**
   * @generated from field: cel.v1.CELRule rule = 1;
   */
  rule?: CELRule;

  /**
   * @generated from field: bool validate_before_save = 2;
   */
  validateBeforeSave: boolean;

  /**
   * @generated from field: bool run_test_cases = 3;
   */
  runTestCases: boolean;
};

/**
 * Describes the message cel.v1.SaveRuleRequest.
 * Use `create(SaveRuleRequestSchema)` to create a new message.
 */
export const SaveRuleRequestSchema: GenMessage<SaveRuleRequest> = /*@__PURE__*/
  messageDesc(file_cel_v1_cel, 40);

/**
 * @generated from message cel.v1.SaveRuleResponse
 */
export type SaveRuleResponse = Message<"cel.v1.SaveRuleResponse"> & {
  /**
   * @generated from field: bool success = 1;
   */
  success: boolean;

  /**
   * @generated from field: string rule_id = 2;
   */
  ruleId: string;

  /**
   * @generated from field: string error = 3;
   */
  error: string;

  /**
   * @generated from field: repeated cel.v1.TestCaseResult test_results = 4;
   */
  testResults: TestCaseResult[];
};

/**
 * Describes the message cel.v1.SaveRuleResponse.
 * Use `create(SaveRuleResponseSchema)` to create a new message.
 */
export const SaveRuleResponseSchema: GenMessage<SaveRuleResponse> = /*@__PURE__*/
  messageDesc(file_cel_v1_cel, 41);

/**
 * Get Rule
 *
 * @generated from message cel.v1.GetRuleRequest
 */
export type GetRuleRequest = Message<"cel.v1.GetRuleRequest"> & {
  /**
   * @generated from field: string rule_id = 1;
   */
  ruleId: string;
};

/**
 * Describes the message cel.v1.GetRuleRequest.
 * Use `create(GetRuleRequestSchema)` to create a new message.
 */
export const GetRuleRequestSchema: GenMessage<GetRuleRequest> = /*@__PURE__*/
  messageDesc(file_cel_v1_cel, 42);

/**
 * @generated from message cel.v1.GetRuleResponse
 */
export type GetRuleResponse = Message<"cel.v1.GetRuleResponse"> & {
  /**
   * @generated from field: cel.v1.CELRule rule = 1;
   */
  rule?: CELRule;

  /**
   * @generated from field: bool found = 2;
   */
  found: boolean;
};

/**
 * Describes the message cel.v1.GetRuleResponse.
 * Use `create(GetRuleResponseSchema)` to create a new message.
 */
export const GetRuleResponseSchema: GenMessage<GetRuleResponse> = /*@__PURE__*/
  messageDesc(file_cel_v1_cel, 43);

/**
 * List Rules
 *
 * @generated from message cel.v1.ListRulesRequest
 */
export type ListRulesRequest = Message<"cel.v1.ListRulesRequest"> & {
  /**
   * @generated from field: int32 page_size = 1;
   */
  pageSize: number;

  /**
   * @generated from field: string page_token = 2;
   */
  pageToken: string;

  /**
   * @generated from field: cel.v1.ListRulesFilter filter = 3;
   */
  filter?: ListRulesFilter;

  /**
   * name, created_at, updated_at, severity
   *
   * @generated from field: string sort_by = 4;
   */
  sortBy: string;

  /**
   * @generated from field: bool ascending = 5;
   */
  ascending: boolean;
};

/**
 * Describes the message cel.v1.ListRulesRequest.
 * Use `create(ListRulesRequestSchema)` to create a new message.
 */
export const ListRulesRequestSchema: GenMessage<ListRulesRequest> = /*@__PURE__*/
  messageDesc(file_cel_v1_cel, 44);

/**
 * @generated from message cel.v1.ListRulesFilter
 */
export type ListRulesFilter = Message<"cel.v1.ListRulesFilter"> & {
  /**
   * @generated from field: repeated string tags = 1;
   */
  tags: string[];

  /**
   * @generated from field: string category = 2;
   */
  category: string;

  /**
   * @generated from field: string severity = 3;
   */
  severity: string;

  /**
   * @generated from field: string search_text = 4;
   */
  searchText: string;

  /**
   * @generated from field: bool verified_only = 5;
   */
  verifiedOnly: boolean;

  /**
   * @generated from field: string compliance_framework = 6;
   */
  complianceFramework: string;

  /**
   * @generated from field: string resource_type = 7;
   */
  resourceType: string;
};

/**
 * Describes the message cel.v1.ListRulesFilter.
 * Use `create(ListRulesFilterSchema)` to create a new message.
 */
export const ListRulesFilterSchema: GenMessage<ListRulesFilter> = /*@__PURE__*/
  messageDesc(file_cel_v1_cel, 45);

/**
 * @generated from message cel.v1.ListRulesResponse
 */
export type ListRulesResponse = Message<"cel.v1.ListRulesResponse"> & {
  /**
   * @generated from field: repeated cel.v1.CELRule rules = 1;
   */
  rules: CELRule[];

  /**
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;

  /**
   * @generated from field: int32 total_count = 3;
   */
  totalCount: number;
};

/**
 * Describes the message cel.v1.ListRulesResponse.
 * Use `create(ListRulesResponseSchema)` to create a new message.
 */
export const ListRulesResponseSchema: GenMessage<ListRulesResponse> = /*@__PURE__*/
  messageDesc(file_cel_v1_cel, 46);

/**
 * Update Rule
 *
 * @generated from message cel.v1.UpdateRuleRequest
 */
export type UpdateRuleRequest = Message<"cel.v1.UpdateRuleRequest"> & {
  /**
   * @generated from field: cel.v1.CELRule rule = 1;
   */
  rule?: CELRule;

  /**
   * @generated from field: bool validate_before_update = 2;
   */
  validateBeforeUpdate: boolean;

  /**
   * @generated from field: bool run_test_cases = 3;
   */
  runTestCases: boolean;

  /**
   * Which fields to update
   *
   * @generated from field: repeated string update_fields = 4;
   */
  updateFields: string[];
};

/**
 * Describes the message cel.v1.UpdateRuleRequest.
 * Use `create(UpdateRuleRequestSchema)` to create a new message.
 */
export const UpdateRuleRequestSchema: GenMessage<UpdateRuleRequest> = /*@__PURE__*/
  messageDesc(file_cel_v1_cel, 47);

/**
 * @generated from message cel.v1.UpdateRuleResponse
 */
export type UpdateRuleResponse = Message<"cel.v1.UpdateRuleResponse"> & {
  /**
   * @generated from field: bool success = 1;
   */
  success: boolean;

  /**
   * @generated from field: string error = 2;
   */
  error: string;

  /**
   * @generated from field: repeated cel.v1.TestCaseResult test_results = 3;
   */
  testResults: TestCaseResult[];
};

/**
 * Describes the message cel.v1.UpdateRuleResponse.
 * Use `create(UpdateRuleResponseSchema)` to create a new message.
 */
export const UpdateRuleResponseSchema: GenMessage<UpdateRuleResponse> = /*@__PURE__*/
  messageDesc(file_cel_v1_cel, 48);

/**
 * Delete Rule
 *
 * @generated from message cel.v1.DeleteRuleRequest
 */
export type DeleteRuleRequest = Message<"cel.v1.DeleteRuleRequest"> & {
  /**
   * @generated from field: string rule_id = 1;
   */
  ruleId: string;
};

/**
 * Describes the message cel.v1.DeleteRuleRequest.
 * Use `create(DeleteRuleRequestSchema)` to create a new message.
 */
export const DeleteRuleRequestSchema: GenMessage<DeleteRuleRequest> = /*@__PURE__*/
  messageDesc(file_cel_v1_cel, 49);

/**
 * @generated from message cel.v1.DeleteRuleResponse
 */
export type DeleteRuleResponse = Message<"cel.v1.DeleteRuleResponse"> & {
  /**
   * @generated from field: bool success = 1;
   */
  success: boolean;

  /**
   * @generated from field: string error = 2;
   */
  error: string;
};

/**
 * Describes the message cel.v1.DeleteRuleResponse.
 * Use `create(DeleteRuleResponseSchema)` to create a new message.
 */
export const DeleteRuleResponseSchema: GenMessage<DeleteRuleResponse> = /*@__PURE__*/
  messageDesc(file_cel_v1_cel, 50);

/**
 * Export Rules
 *
 * @generated from message cel.v1.ExportRulesRequest
 */
export type ExportRulesRequest = Message<"cel.v1.ExportRulesRequest"> & {
  /**
   * Empty means export all
   *
   * @generated from field: repeated string rule_ids = 1;
   */
  ruleIds: string[];

  /**
   * @generated from field: cel.v1.ExportFormat format = 2;
   */
  format: ExportFormat;

  /**
   * Alternative to rule_ids
   *
   * @generated from field: cel.v1.ListRulesFilter filter = 3;
   */
  filter?: ListRulesFilter;

  /**
   * @generated from field: bool include_test_cases = 4;
   */
  includeTestCases: boolean;

  /**
   * @generated from field: bool include_metadata = 5;
   */
  includeMetadata: boolean;
};

/**
 * Describes the message cel.v1.ExportRulesRequest.
 * Use `create(ExportRulesRequestSchema)` to create a new message.
 */
export const ExportRulesRequestSchema: GenMessage<ExportRulesRequest> = /*@__PURE__*/
  messageDesc(file_cel_v1_cel, 51);

/**
 * @generated from message cel.v1.ExportRulesResponse
 */
export type ExportRulesResponse = Message<"cel.v1.ExportRulesResponse"> & {
  /**
   * @generated from field: bool success = 1;
   */
  success: boolean;

  /**
   * @generated from field: string error = 2;
   */
  error: string;

  /**
   * The exported data
   *
   * @generated from field: bytes data = 3;
   */
  data: Uint8Array;

  /**
   * @generated from field: string content_type = 4;
   */
  contentType: string;

  /**
   * @generated from field: int32 rule_count = 5;
   */
  ruleCount: number;
};

/**
 * Describes the message cel.v1.ExportRulesResponse.
 * Use `create(ExportRulesResponseSchema)` to create a new message.
 */
export const ExportRulesResponseSchema: GenMessage<ExportRulesResponse> = /*@__PURE__*/
  messageDesc(file_cel_v1_cel, 52);

/**
 * Import Rules
 *
 * @generated from message cel.v1.ImportRulesRequest
 */
export type ImportRulesRequest = Message<"cel.v1.ImportRulesRequest"> & {
  /**
   * @generated from field: bytes data = 1;
   */
  data: Uint8Array;

  /**
   * @generated from field: cel.v1.ImportFormat format = 2;
   */
  format: ImportFormat;

  /**
   * @generated from field: cel.v1.ImportOptions options = 3;
   */
  options?: ImportOptions;
};

/**
 * Describes the message cel.v1.ImportRulesRequest.
 * Use `create(ImportRulesRequestSchema)` to create a new message.
 */
export const ImportRulesRequestSchema: GenMessage<ImportRulesRequest> = /*@__PURE__*/
  messageDesc(file_cel_v1_cel, 53);

/**
 * @generated from message cel.v1.ImportOptions
 */
export type ImportOptions = Message<"cel.v1.ImportOptions"> & {
  /**
   * @generated from field: bool overwrite_existing = 1;
   */
  overwriteExisting: boolean;

  /**
   * @generated from field: bool validate_all = 2;
   */
  validateAll: boolean;

  /**
   * @generated from field: bool run_test_cases = 3;
   */
  runTestCases: boolean;

  /**
   * @generated from field: bool skip_on_error = 4;
   */
  skipOnError: boolean;

  /**
   * @generated from field: repeated string tags_to_add = 5;
   */
  tagsToAdd: string[];

  /**
   * @generated from field: string category_override = 6;
   */
  categoryOverride: string;
};

/**
 * Describes the message cel.v1.ImportOptions.
 * Use `create(ImportOptionsSchema)` to create a new message.
 */
export const ImportOptionsSchema: GenMessage<ImportOptions> = /*@__PURE__*/
  messageDesc(file_cel_v1_cel, 54);

/**
 * @generated from message cel.v1.ImportRulesResponse
 */
export type ImportRulesResponse = Message<"cel.v1.ImportRulesResponse"> & {
  /**
   * @generated from field: bool success = 1;
   */
  success: boolean;

  /**
   * @generated from field: string error = 2;
   */
  error: string;

  /**
   * @generated from field: int32 imported_count = 3;
   */
  importedCount: number;

  /**
   * @generated from field: int32 skipped_count = 4;
   */
  skippedCount: number;

  /**
   * @generated from field: int32 failed_count = 5;
   */
  failedCount: number;

  /**
   * @generated from field: repeated cel.v1.ImportResult results = 6;
   */
  results: ImportResult[];
};

/**
 * Describes the message cel.v1.ImportRulesResponse.
 * Use `create(ImportRulesResponseSchema)` to create a new message.
 */
export const ImportRulesResponseSchema: GenMessage<ImportRulesResponse> = /*@__PURE__*/
  messageDesc(file_cel_v1_cel, 55);

/**
 * @generated from message cel.v1.ImportResult
 */
export type ImportResult = Message<"cel.v1.ImportResult"> & {
  /**
   * @generated from field: string rule_name = 1;
   */
  ruleName: string;

  /**
   * @generated from field: bool success = 2;
   */
  success: boolean;

  /**
   * @generated from field: string error = 3;
   */
  error: string;

  /**
   * @generated from field: string rule_id = 4;
   */
  ruleId: string;
};

/**
 * Describes the message cel.v1.ImportResult.
 * Use `create(ImportResultSchema)` to create a new message.
 */
export const ImportResultSchema: GenMessage<ImportResult> = /*@__PURE__*/
  messageDesc(file_cel_v1_cel, 56);

/**
 * Validate Rule with Test Cases
 *
 * @generated from message cel.v1.ValidateRuleWithTestCasesRequest
 */
export type ValidateRuleWithTestCasesRequest = Message<"cel.v1.ValidateRuleWithTestCasesRequest"> & {
  /**
   * @generated from field: cel.v1.CELRule rule = 1;
   */
  rule?: CELRule;

  /**
   * @generated from field: bool run_against_cluster = 2;
   */
  runAgainstCluster: boolean;

  /**
   * @generated from field: string namespace = 3;
   */
  namespace: string;
};

/**
 * Describes the message cel.v1.ValidateRuleWithTestCasesRequest.
 * Use `create(ValidateRuleWithTestCasesRequestSchema)` to create a new message.
 */
export const ValidateRuleWithTestCasesRequestSchema: GenMessage<ValidateRuleWithTestCasesRequest> = /*@__PURE__*/
  messageDesc(file_cel_v1_cel, 57);

/**
 * @generated from message cel.v1.ValidateRuleWithTestCasesResponse
 */
export type ValidateRuleWithTestCasesResponse = Message<"cel.v1.ValidateRuleWithTestCasesResponse"> & {
  /**
   * @generated from field: bool all_passed = 1;
   */
  allPassed: boolean;

  /**
   * @generated from field: repeated cel.v1.TestCaseResult test_results = 2;
   */
  testResults: TestCaseResult[];

  /**
   * @generated from field: repeated cel.v1.ValidationResult cluster_results = 3;
   */
  clusterResults: ValidationResult[];
};

/**
 * Describes the message cel.v1.ValidateRuleWithTestCasesResponse.
 * Use `create(ValidateRuleWithTestCasesResponseSchema)` to create a new message.
 */
export const ValidateRuleWithTestCasesResponseSchema: GenMessage<ValidateRuleWithTestCasesResponse> = /*@__PURE__*/
  messageDesc(file_cel_v1_cel, 58);

/**
 * @generated from message cel.v1.TestCaseResult
 */
export type TestCaseResult = Message<"cel.v1.TestCaseResult"> & {
  /**
   * @generated from field: string test_case_id = 1;
   */
  testCaseId: string;

  /**
   * @generated from field: string test_case_name = 2;
   */
  testCaseName: string;

  /**
   * @generated from field: bool passed = 3;
   */
  passed: boolean;

  /**
   * @generated from field: string actual_result = 4;
   */
  actualResult: string;

  /**
   * @generated from field: string error = 5;
   */
  error: string;

  /**
   * @generated from field: int64 duration_ms = 6;
   */
  durationMs: bigint;
};

/**
 * Describes the message cel.v1.TestCaseResult.
 * Use `create(TestCaseResultSchema)` to create a new message.
 */
export const TestCaseResultSchema: GenMessage<TestCaseResult> = /*@__PURE__*/
  messageDesc(file_cel_v1_cel, 59);

/**
 * Rule Modification Context (added to existing ChatAssistRequest)
 *
 * @generated from message cel.v1.RuleModificationContext
 */
export type RuleModificationContext = Message<"cel.v1.RuleModificationContext"> & {
  /**
   * ID of rule to modify
   *
   * @generated from field: string rule_id = 1;
   */
  ruleId: string;

  /**
   * Current rule definition
   *
   * @generated from field: cel.v1.CELRule current_rule = 2;
   */
  currentRule?: CELRule;

  /**
   * What to change
   *
   * @generated from field: string modification_intent = 3;
   */
  modificationIntent: string;
};

/**
 * Describes the message cel.v1.RuleModificationContext.
 * Use `create(RuleModificationContextSchema)` to create a new message.
 */
export const RuleModificationContextSchema: GenMessage<RuleModificationContext> = /*@__PURE__*/
  messageDesc(file_cel_v1_cel, 60);

/**
 * How to access files on nodes
 *
 * @generated from enum cel.v1.FileAccessMode
 */
export enum FileAccessMode {
  /**
   * @generated from enum value: FILE_ACCESS_MODE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * Direct host path access (requires privileges)
   *
   * @generated from enum value: FILE_ACCESS_MODE_HOST_PATH = 1;
   */
  HOST_PATH = 1,

  /**
   * Access from within container
   *
   * @generated from enum value: FILE_ACCESS_MODE_CONTAINER = 2;
   */
  CONTAINER = 2,

  /**
   * Deploy as DaemonSet for node access
   *
   * @generated from enum value: FILE_ACCESS_MODE_DAEMONSET = 3;
   */
  DAEMONSET = 3,

  /**
   * SSH to node (requires credentials)
   *
   * @generated from enum value: FILE_ACCESS_MODE_SSH = 4;
   */
  SSH = 4,
}

/**
 * Describes the enum cel.v1.FileAccessMode.
 */
export const FileAccessModeSchema: GenEnum<FileAccessMode> = /*@__PURE__*/
  enumDesc(file_cel_v1_cel, 0);

/**
 * @generated from enum cel.v1.ExportFormat
 */
export enum ExportFormat {
  /**
   * @generated from enum value: EXPORT_FORMAT_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: EXPORT_FORMAT_JSON = 1;
   */
  JSON = 1,

  /**
   * @generated from enum value: EXPORT_FORMAT_YAML = 2;
   */
  YAML = 2,

  /**
   * Convert to OPA Rego
   *
   * @generated from enum value: EXPORT_FORMAT_REGO = 3;
   */
  REGO = 3,

  /**
   * Convert to HashiCorp Sentinel
   *
   * @generated from enum value: EXPORT_FORMAT_SENTINEL = 4;
   */
  SENTINEL = 4,
}

/**
 * Describes the enum cel.v1.ExportFormat.
 */
export const ExportFormatSchema: GenEnum<ExportFormat> = /*@__PURE__*/
  enumDesc(file_cel_v1_cel, 1);

/**
 * @generated from enum cel.v1.ImportFormat
 */
export enum ImportFormat {
  /**
   * @generated from enum value: IMPORT_FORMAT_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: IMPORT_FORMAT_JSON = 1;
   */
  JSON = 1,

  /**
   * @generated from enum value: IMPORT_FORMAT_YAML = 2;
   */
  YAML = 2,

  /**
   * @generated from enum value: IMPORT_FORMAT_AUTO_DETECT = 3;
   */
  AUTO_DETECT = 3,
}

/**
 * Describes the enum cel.v1.ImportFormat.
 */
export const ImportFormatSchema: GenEnum<ImportFormat> = /*@__PURE__*/
  enumDesc(file_cel_v1_cel, 2);

/**
 * Service definition
 *
 * @generated from service cel.v1.CELValidationService
 */
export const CELValidationService: GenService<{
  /**
   * @generated from rpc cel.v1.CELValidationService.ValidateCEL
   */
  validateCEL: {
    methodKind: "unary";
    input: typeof ValidateCELRequestSchema;
    output: typeof ValidationResponseSchema;
  },
  /**
   * ValidateCELStream provides bidirectional streaming for real-time validation
   *
   * @generated from rpc cel.v1.CELValidationService.ValidateCELStream
   */
  validateCELStream: {
    methodKind: "bidi_streaming";
    input: typeof ValidateCELStreamRequestSchema;
    output: typeof ValidateCELStreamResponseSchema;
  },
  /**
   * @generated from rpc cel.v1.CELValidationService.DiscoverResources
   */
  discoverResources: {
    methodKind: "unary";
    input: typeof DiscoverResourcesRequestSchema;
    output: typeof ResourceDiscoveryResponseSchema;
  },
  /**
   * @generated from rpc cel.v1.CELValidationService.ExecuteAgentTask
   */
  executeAgentTask: {
    methodKind: "unary";
    input: typeof AgentExecutionRequestSchema;
    output: typeof AgentExecutionResponseSchema;
  },
  /**
   * ChatAssist provides server streaming for AI-assisted CEL rule generation and validation
   *
   * @generated from rpc cel.v1.CELValidationService.ChatAssist
   */
  chatAssist: {
    methodKind: "server_streaming";
    input: typeof ChatAssistRequestSchema;
    output: typeof ChatAssistResponseSchema;
  },
  /**
   * Rule Library Operations
   *
   * @generated from rpc cel.v1.CELValidationService.SaveRule
   */
  saveRule: {
    methodKind: "unary";
    input: typeof SaveRuleRequestSchema;
    output: typeof SaveRuleResponseSchema;
  },
  /**
   * @generated from rpc cel.v1.CELValidationService.GetRule
   */
  getRule: {
    methodKind: "unary";
    input: typeof GetRuleRequestSchema;
    output: typeof GetRuleResponseSchema;
  },
  /**
   * @generated from rpc cel.v1.CELValidationService.ListRules
   */
  listRules: {
    methodKind: "unary";
    input: typeof ListRulesRequestSchema;
    output: typeof ListRulesResponseSchema;
  },
  /**
   * @generated from rpc cel.v1.CELValidationService.UpdateRule
   */
  updateRule: {
    methodKind: "unary";
    input: typeof UpdateRuleRequestSchema;
    output: typeof UpdateRuleResponseSchema;
  },
  /**
   * @generated from rpc cel.v1.CELValidationService.DeleteRule
   */
  deleteRule: {
    methodKind: "unary";
    input: typeof DeleteRuleRequestSchema;
    output: typeof DeleteRuleResponseSchema;
  },
  /**
   * @generated from rpc cel.v1.CELValidationService.ExportRules
   */
  exportRules: {
    methodKind: "unary";
    input: typeof ExportRulesRequestSchema;
    output: typeof ExportRulesResponseSchema;
  },
  /**
   * @generated from rpc cel.v1.CELValidationService.ImportRules
   */
  importRules: {
    methodKind: "unary";
    input: typeof ImportRulesRequestSchema;
    output: typeof ImportRulesResponseSchema;
  },
  /**
   * @generated from rpc cel.v1.CELValidationService.ValidateRuleWithTestCases
   */
  validateRuleWithTestCases: {
    methodKind: "unary";
    input: typeof ValidateRuleWithTestCasesRequestSchema;
    output: typeof ValidateRuleWithTestCasesResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_cel_v1_cel, 0);

